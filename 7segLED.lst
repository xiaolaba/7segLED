
7segLED.out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b5  00000000  00000000  000001df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000105  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000017b  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000104  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:


#ifdef BETTER_ABSTRACTION
// count 0x00 ~ 0xFF
int main(void)
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	60 97       	sbiw	r28, 0x10	; 16
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
 
//uint8_t a[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x67};  // bug, intentionally?


uint8_t lookupTable[16]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x27,0x7F,0x6F,  // 7seg LED map for "0" ~ "9" 
                         0x77,0x7C,0x39,0x5E,0x79,0x71};                     // 7seg LED map for "A,b,C,d,E,F"
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x22>

 driverPort=0xff;  // PD0 - PD7, all output
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a b9       	out	0x0a, r24	; 10
  c4:	30 e0       	ldi	r19, 0x00	; 0
  for(Tens = 0; Tens < 16; Tens ++)     // 十位, count 0 - F
  {
   for(Units = 0; Units < 16; Units ++) // 個位, count 0 - F
   {       
     //segmentDriver=lookupTable[Tens] + showTens;  // for common cathode
     segmentDriver=~lookupTable[Tens] + showTens;   // for common anode
  c6:	be 01       	movw	r22, r28
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	40 e9       	ldi	r20, 0x90	; 144
  ce:	51 e0       	ldi	r21, 0x01	; 1

 while(1)
 {
  for(Tens = 0; Tens < 16; Tens ++)     // 十位, count 0 - F
  {
   for(Units = 0; Units < 16; Units ++) // 個位, count 0 - F
  d0:	8e 01       	movw	r16, r28
  d2:	0f 5e       	subi	r16, 0xEF	; 239
  d4:	1f 4f       	sbci	r17, 0xFF	; 255
  d6:	1a c0       	rjmp	.+52     	; 0x10c <main+0x76>
   {       
     //segmentDriver=lookupTable[Tens] + showTens;  // for common cathode
     segmentDriver=~lookupTable[Tens] + showTens;   // for common anode
  d8:	2b b9       	out	0x0b, r18	; 11
  da:	80 ed       	ldi	r24, 0xD0	; 208
  dc:	97 e0       	ldi	r25, 0x07	; 7
  de:	da 01       	movw	r26, r20
  e0:	11 97       	sbiw	r26, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x48>
     _delay_ms(200);
     
     //segmentDriver=lookupTable[Units] + showUnits; // for common cathode   
     segmentDriver=~lookupTable[Units] + showUnits;  // for common anode
  e8:	80 81       	ld	r24, Z
  ea:	80 95       	com	r24
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	80 ea       	ldi	r24, 0xA0	; 160
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	da 01       	movw	r26, r20
  f4:	11 97       	sbiw	r26, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <main+0x5c>
  fc:	31 96       	adiw	r30, 0x01	; 1

 while(1)
 {
  for(Tens = 0; Tens < 16; Tens ++)     // 十位, count 0 - F
  {
   for(Units = 0; Units < 16; Units ++) // 個位, count 0 - F
  fe:	e0 17       	cp	r30, r16
 100:	f1 07       	cpc	r31, r17
 102:	51 f7       	brne	.-44     	; 0xd8 <main+0x42>

 driverPort=0xff;  // PD0 - PD7, all output

 while(1)
 {
  for(Tens = 0; Tens < 16; Tens ++)     // 十位, count 0 - F
 104:	3f 5f       	subi	r19, 0xFF	; 255
 106:	30 31       	cpi	r19, 0x10	; 16
 108:	08 f0       	brcs	.+2      	; 0x10c <main+0x76>
 10a:	30 e0       	ldi	r19, 0x00	; 0
  {
   for(Units = 0; Units < 16; Units ++) // 個位, count 0 - F
   {       
     //segmentDriver=lookupTable[Tens] + showTens;  // for common cathode
     segmentDriver=~lookupTable[Tens] + showTens;   // for common anode
 10c:	fb 01       	movw	r30, r22
 10e:	e3 0f       	add	r30, r19
 110:	f1 1d       	adc	r31, r1
 112:	20 81       	ld	r18, Z
 114:	20 95       	com	r18
 116:	20 58       	subi	r18, 0x80	; 128
 118:	fb 01       	movw	r30, r22
 11a:	de cf       	rjmp	.-68     	; 0xd8 <main+0x42>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
